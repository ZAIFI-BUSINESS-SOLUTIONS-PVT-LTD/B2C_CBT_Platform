import { useState } from "react";
import { useLocation } from "wouter";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { apiRequest } from "@/lib/queryClient";
import { StudentProfile } from "@/types/api";

export function RegisterForm({ onSuccess }: { onSuccess?: (profile: StudentProfile) => void }) {
  const [form, setForm] = useState({
    fullName: "",
    email: "",
    phoneNumber: "",
    dateOfBirth: "",
    schoolName: "",
    targetExamYear: "2025",
    password: "", // will be auto-generated by backend, but can show after creation
  });
  const [, navigate] = useLocation();
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [success, setSuccess] = useState<string | null>(null);
  const [generated, setGenerated] = useState<{ studentId: string; password: string } | null>(null);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError(null);
    setSuccess(null);
    setLoading(true);
    try {
      const payload: Record<string, any> = {
        full_name: form.fullName,
        email: form.email,
        phone_number: form.phoneNumber,
        date_of_birth: form.dateOfBirth,
        school_name: form.schoolName,
        target_exam_year: form.targetExamYear ? parseInt(form.targetExamYear) : undefined,
      };
      // Remove undefined fields in a type-safe way
      Object.keys(payload).forEach((key) => {
        if (payload[key] === undefined) {
          delete payload[key];
        }
      });
      const profile = await apiRequest("/api/test/create-student/", "POST", payload);
      if (onSuccess) onSuccess(profile);
      navigate("/");
    } catch (err: any) {
      // Try to parse backend error details
      let msg = err.message || "Registration failed";
      if (err.response) {
        try {
          const data = await err.response.json();
          msg = typeof data === 'string' ? data : JSON.stringify(data);
        } catch {}
      }
      setError(msg);
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-4 max-w-sm mx-auto p-6 bg-white rounded shadow">
      <h2 className="text-xl font-bold mb-2">Create Student Profile</h2>
      <Input name="fullName" placeholder="Full Name" value={form.fullName} onChange={handleChange} required />
      <Input name="email" type="email" placeholder="Email" value={form.email} onChange={handleChange} required />
      <Input name="phoneNumber" placeholder="Phone Number" value={form.phoneNumber} onChange={handleChange} />
      <Input name="dateOfBirth" type="date" placeholder="Date of Birth" value={form.dateOfBirth} onChange={handleChange} required />
      <Input name="schoolName" placeholder="School Name" value={form.schoolName} onChange={handleChange} />
      <Input name="targetExamYear" type="number" min="2024" max="2030" placeholder="Target Exam Year" value={form.targetExamYear} onChange={handleChange} />
      <Button type="submit" disabled={loading} className="w-full">{loading ? "Registering..." : "Register"}</Button>
      {error && <div className="text-red-600 text-sm mt-2">{error}</div>}
      {success && generated && (
        <div className="text-green-700 text-sm mt-2">
          {success}<br />
          <b>Student ID:</b> {generated.studentId}<br />
          <b>Password:</b> {generated.password}<br />
          <span className="text-xs text-gray-500">Please save these credentials to log in.</span>
        </div>
      )}
    </form>
  );
}
