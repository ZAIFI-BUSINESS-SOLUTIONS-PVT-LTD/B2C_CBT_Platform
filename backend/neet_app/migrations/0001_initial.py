# Generated by Django 5.2.4 on 2025-08-23 08:16

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Question",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("question", models.TextField()),
                ("option_a", models.TextField()),
                ("option_b", models.TextField()),
                ("option_c", models.TextField()),
                ("option_d", models.TextField()),
                ("correct_answer", models.CharField(max_length=1)),
                ("explanation", models.TextField()),
                ("difficulty", models.TextField(blank=True, null=True)),
                ("question_type", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Question",
                "verbose_name_plural": "Questions",
                "db_table": "questions",
            },
        ),
        migrations.CreateModel(
            name="ChatSession",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("student_id", models.CharField(db_index=True, max_length=20)),
                (
                    "chat_session_id",
                    models.CharField(db_index=True, max_length=100, unique=True),
                ),
                ("session_title", models.TextField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Chat Session",
                "verbose_name_plural": "Chat Sessions",
                "db_table": "chat_sessions",
                "indexes": [
                    models.Index(
                        fields=["student_id", "created_at"],
                        name="chat_sessio_student_2db1d4_idx",
                    ),
                    models.Index(
                        fields=["is_active", "updated_at"],
                        name="chat_sessio_is_acti_aebe78_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="StudentProfile",
            fields=[
                (
                    "student_id",
                    models.CharField(
                        max_length=20, primary_key=True, serialize=False, unique=True
                    ),
                ),
                ("password_hash", models.CharField(max_length=128)),
                ("generated_password", models.CharField(blank=True, max_length=64)),
                ("full_name", models.TextField()),
                ("email", models.EmailField(max_length=254, unique=True)),
                (
                    "phone_number",
                    models.CharField(blank=True, max_length=20, null=True),
                ),
                ("date_of_birth", models.DateField()),
                ("school_name", models.TextField(blank=True, null=True)),
                ("target_exam_year", models.IntegerField(blank=True, null=True)),
                ("is_active", models.BooleanField(default=True)),
                ("is_verified", models.BooleanField(default=False)),
                ("last_login", models.DateTimeField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
            ],
            options={
                "verbose_name": "Student Profile",
                "verbose_name_plural": "Student Profiles",
                "db_table": "student_profiles",
                "indexes": [
                    models.Index(fields=["email"], name="student_pro_email_afb72e_idx"),
                    models.Index(
                        fields=["date_of_birth"], name="student_pro_date_of_679986_idx"
                    ),
                    models.Index(
                        fields=["is_active", "created_at"],
                        name="student_pro_is_acti_2c2b5b_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TestSession",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("student_id", models.CharField(db_index=True, max_length=20)),
                ("selected_topics", models.JSONField()),
                ("physics_topics", models.JSONField(blank=True, default=list)),
                ("chemistry_topics", models.JSONField(blank=True, default=list)),
                ("botany_topics", models.JSONField(blank=True, default=list)),
                ("zoology_topics", models.JSONField(blank=True, default=list)),
                ("time_limit", models.IntegerField(blank=True, null=True)),
                ("question_count", models.IntegerField(blank=True, null=True)),
                ("start_time", models.DateTimeField()),
                ("end_time", models.DateTimeField(blank=True, null=True)),
                ("is_completed", models.BooleanField(default=False)),
                ("total_questions", models.IntegerField()),
                ("correct_answers", models.IntegerField(default=0)),
                ("incorrect_answers", models.IntegerField(default=0)),
                ("unanswered", models.IntegerField(default=0)),
                ("total_time_taken", models.IntegerField(blank=True, null=True)),
                ("physics_score", models.FloatField(blank=True, null=True)),
                ("chemistry_score", models.FloatField(blank=True, null=True)),
                ("botany_score", models.FloatField(blank=True, null=True)),
                ("zoology_score", models.FloatField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Test Session",
                "verbose_name_plural": "Test Sessions",
                "db_table": "test_sessions",
                "indexes": [
                    models.Index(
                        fields=["student_id", "start_time"],
                        name="test_sessio_student_f7ee82_idx",
                    ),
                    models.Index(
                        fields=["is_completed", "start_time"],
                        name="test_sessio_is_comp_0bf6f8_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="ReviewComment",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("student_comment", models.TextField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "question",
                    models.ForeignKey(
                        db_column="question_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="neet_app.question",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        db_column="session_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="neet_app.testsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Review Comment",
                "verbose_name_plural": "Review Comments",
                "db_table": "review_comments",
            },
        ),
        migrations.CreateModel(
            name="Topic",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("name", models.TextField()),
                ("subject", models.TextField()),
                ("icon", models.TextField()),
                ("chapter", models.TextField(blank=True, null=True)),
            ],
            options={
                "verbose_name": "Topic",
                "verbose_name_plural": "Topics",
                "db_table": "topics",
                "unique_together": {("name", "subject", "chapter")},
            },
        ),
        migrations.AddField(
            model_name="question",
            name="topic",
            field=models.ForeignKey(
                db_column="topic_id",
                on_delete=django.db.models.deletion.CASCADE,
                to="neet_app.topic",
            ),
        ),
        migrations.CreateModel(
            name="ChatMessage",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "message_type",
                    models.CharField(
                        choices=[("user", "User"), ("bot", "Bot")], max_length=10
                    ),
                ),
                ("message_content", models.TextField()),
                ("sql_query", models.TextField(blank=True, null=True)),
                ("processing_time", models.FloatField(blank=True, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "chat_session",
                    models.ForeignKey(
                        db_column="chat_session_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="neet_app.chatsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Chat Message",
                "verbose_name_plural": "Chat Messages",
                "db_table": "chat_messages",
                "ordering": ["created_at"],
                "indexes": [
                    models.Index(
                        fields=["chat_session", "created_at"],
                        name="chat_messag_chat_se_b79339_idx",
                    ),
                    models.Index(
                        fields=["message_type", "created_at"],
                        name="chat_messag_message_977880_idx",
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="TestAnswer",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "selected_answer",
                    models.CharField(blank=True, max_length=1, null=True),
                ),
                ("is_correct", models.BooleanField(blank=True, null=True)),
                ("marked_for_review", models.BooleanField(default=False)),
                ("time_taken", models.IntegerField(blank=True, null=True)),
                ("answered_at", models.DateTimeField(blank=True, null=True)),
                (
                    "question",
                    models.ForeignKey(
                        db_column="question_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="neet_app.question",
                    ),
                ),
                (
                    "session",
                    models.ForeignKey(
                        db_column="session_id",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="neet_app.testsession",
                    ),
                ),
            ],
            options={
                "verbose_name": "Test Answer",
                "verbose_name_plural": "Test Answers",
                "db_table": "test_answers",
                "unique_together": {("session", "question")},
            },
        ),
        migrations.AlterUniqueTogether(
            name="question",
            unique_together={
                ("question", "topic", "option_a", "option_b", "option_c", "option_d")
            },
        ),
    ]
